package sortingvisualizer;

public class SimpleSorts {

    public static void delay() {
        try {
            Thread.sleep(10);
        } catch (InterruptedException e) {
            System.err.println("Interrupted during algorithm delay!");
        }
    }

    public static void shuffle(int[] array) {
        for (int i = 0; i < array.length; i++) {
            // random index past i
            int random = i + (int)(Math.random() * (array.length - i));
            // swap random with present element
            int temp = array[random];
            array[random] = array[i];
            array[i] = temp;
            delay();
        }
    }

    public static void insertionSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            for (int j = i; j > 0 && array[j-1] > array[j]; j--) {
                int temp = array[j];
                array[j] = array[j-1];
                array[j-1] = temp;
                delay();
            }
            delay();
        }
    }

    public static void selectionSort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
                delay();
            }
            if (minIndex != i) {
                int temp = array[i];
                array[i] = array[minIndex];
                array[i] = temp;
            }
            delay();
        }
    }

    public static void bubbleSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            for (int j = 1; j < array.length; j++) {
                if (array[j - 1] > array[j]) {
                    int temp = array[j];
                    array[j] = array[j-1];
                    array[j-1] = temp;
                }
                delay();
            }
            delay();

        }
    }

    public static void cocktailSort(int[] array) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i+1];
                    array[i+1] = temp;
                    swapped = true;
                }
                delay();
            }
            if (!swapped) {
                //we can exit the outer loop here if no swaps occurred.
                break;
            }
            swapped = false;
            for (int i = array.length - 2; i >= 0; i--) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i+1];
                    array[i+1] = temp;
                    swapped = true;
                }
                delay();
            }
            //if no elements have been swapped, then the list is sorted
        } while (swapped);
    }

    public static void bogoSort(int[] array) {
        while (!isSorted(array)) {
            int a = (int) (Math.random() * array.length);
            int b = (int) (Math.random() * array.length);
            int temp = array[a];
            array[a] = array[b];
            array[b] = temp;
            delay();
        }
    }

    public static boolean isSorted(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            int a = array[i];
            int b = array[i+1];
            if (a > b) {
                return false;
            }
        }
        return true;
    }
}
